package org.mitre.sim;

import org.mitre.sim.exec.LogicalProcess;
import org.mitre.sim.exec.LogicalProcessState;

import java.io.PrintStream;
import java.lang.reflect.Method;
import java.text.DecimalFormat;

/**
  The part of a simulation entity provided by {@link Simulation Simulation}.
  
  A simulation entity is represented by two associated objects.
  The user writes an implementation either of {@link EntityDelegate EntityDelegate} or
  of {@link ProcessDelegate ProcessDelegate}.
  When this delegate instance is registered with the <code>Simulation</code>, an <code>Entity</code>
  instance is returned that is associated with the delegate.
  Specifically, the user obtains an <code>Entity</code> instance from
  {@link Simulation#register(EntityDelegate) Simulation.register(EntityDelegate)} or from
  {@link Simulation#register(EntityDelegate, String) Simulation.register(EntityDelegate, String)}.
	<p>
  Entities embody the autonomous action in a simulation.
  The user programs an entity's activity in the delegate implementation.
  The delegate uses its associated <code>Entity</code> instance to request
  services from its <code>Simulation</code>.
  <p>
  An entity can be a <a href="package-summary.html#InteractingProcesses">process entity</a>,
  in which case it implements {@link ProcessDelegate ProcessDelegate}, or a
  <a href="package-summary.html#SchedEventsView">scheduled entity</a>, in which
  case it implements {@link EntityDelegate EntityDelegate}.
  <p>
  Process entities embody both
  proactive and reactive behavior. 
  The {@link ProcessDelegate#agenda() ProcessDelegate.agenda()} contains
  the proactive part of a <code>Entity</code>. 
  The reactive behavior can be coded in
  <a href="package-summary.html#ActionMethods">action methods</a>
  that are invoked by other entities.
  <p>
  Scheduled entities, in their {@link EntityDelegate EntityDelegate} implementations,
  {@link #schedule(String, double, Object[]) schedule} at least
  one <a href="package-summary.html#DefineEvent">event</a> in their
  {@link EntityDelegate#initialize() initialize} method.
  <br>
  <p><img src="doc-files/mitre_logo.gif"><br>
  <font size=-2>Copyright &copy; 2003-2004 The MITRE Corporation</font>
 */

public final class Entity extends LogicalProcess {
  private String name = null;
  private static final DecimalFormat infoTimeFormat = new DecimalFormat("0.000");

  @SuppressWarnings("unused")
  //Hide no-arg constructor from user.
	private Entity() { }
  
  protected Entity(EntityDelegate delegate) {
    this.name = makeEntityName(delegate);
  }
  
  protected Entity(EntityDelegate delegate, String name) {
    if (name == null) {
      this.name = makeEntityName(delegate);
    } else {
      name = name.trim();
      if (name.length() > 0) {
        this.name = name;
      } else {
        this.name = makeEntityName(delegate);
      }
    }
  }

  private String makeEntityName(EntityDelegate theDelegate) {
    String clazz = theDelegate.getClass().getName();
    return clazz.substring(clazz.lastIndexOf(".")+1, clazz.length()) + "-" + uniqueEntityNumber++;
  }

  /**
   Return the string name of this entity.
      Entity names are for
      developer convenience, are not examined by the executive, and need not be
      unique.
      Names are used to annotate messages generated by methods
      {@link #info(String) info}
      and {@link #toString() toString}.
      Default names have the form "EntityDelegateClass-n" 
      where EntityDelegateClass is the class of the
      entity delegate and n is an arbitrary, unique integer.
      The user can specify the name of an entity when its delegate is
      {@link Simulation#register(EntityDelegate, String) registered}.
      @see #info(String)
      @see #toString()
   @return The name of this entity.
  */
  public final String getName() {
    return name;
  }
  
  /**
   * Return associated {@link EntityDelegate EntityDelegate}.
   * @return {@link EntityDelegate EntityDelegate}
   */
  public EntityDelegate getDelegate() {
  	return super.getDelegate();
  }
  
  /**
    Affiliate a new entity with this simulation with framework-supplied name.
      Entity names are for
      developer convenience, are not examined by the executive, and need not be
      unique.
      Names are used to annotate messages generated by methods
      {@link #info(String) info}
      and {@link #toString() toString}.
      This has the same semantics as 
      {@link Simulation#register(EntityDelegate) Simulation.register(EntityDelegate)}.
    @param ed EntityDelegate instance being registered
    @return Same <code>Entity</code> supplied by parameter <code>e</code>.
    @throws IllegalStateException if registration attempted after last time has been reached.
   */
  public final Entity register(EntityDelegate ed) {
  	Entity e = new Entity(ed);
    e.setExecutive(exec, ed);
    ed.setEntity(e);
    return e;
  }
  
  /**
    Affiliate a new entity with this simulation, with specified name.
      Entity names are for
      developer convenience, are not examined by the executive, and need not be
      unique.
      Names are used to annotate messages generated by methods
      {@link #info(String) info}
      and {@link #toString() toString}.
      This has the same semantics as 
      {@link Simulation#register(EntityDelegate, String) Simulation.register(EntityDelegate, String)}.
    @param ed EntityDelegate instance being registered
    @param theName
    @return Same <code>Entity</code> supplied by parameter <code>e</code>.
    @throws IllegalStateException if registration attempted after last time has been reached.
   */
  public final Entity register(EntityDelegate ed, String theName) {
  	Entity e = new Entity(ed, theName);
    e.setExecutive(exec, ed);
    ed.setEntity(e);
    return e;
  }

  /**
    Stops the entire simulation.
    Simulations will end when all the entity {@link #agenda() agendas} are
    complete, no events are scheduled, or the last value of simulation time is reached.
    This method is used if an entity desires to stop the simulation
    before then.
    Causes {@link #entityComplete() entitiyComplete} to be invoked on all entities
    at the current value of simulation time.
    @see #getTimeLast()
   */
  public final void stopSimulation() {
    getExec().stopSimulation(this);
  }

  /**
    Returns the current simulation time.
    Safe to be called from another thread.
    @return Current simulation time.
   */
  public final double getTimeNow() {
    return getExec() == null ? 0.0 : getExec().getTimeNow();
  }

  /**
    Last value of simulation time before the simulation stops.
    @return Last value of simulation time to be simulated.
    @see #setTimeLast(double t)
   */
  public final double getTimeLast() {
    return getExec().getTimeLast();
  }

  /**
    Specify the last value of time to be simulated before the
    simulation stops. The simulation can end before <code>timeLast</code>
    if all the entities reach the end of their {@link #agenda() agendas}
    and/or stop scheduling events before then.
    If an entity {@link #agenda() agenda} is
    <a href="package-summary.html#DefineActive">Active</a> when simulation
    time reaches the <code>timeLast</code> value, the executive will stop the simulation.
    The default value of <code>timeLast</code> is positive infinity.
    @param t Last value of simulation time to be simulated.
    @see #getTimeLast()
    @see org.mitre.sim.Simulation#setTimeLast(double)
   */
  public final void setTimeLast(double t) {
    getExec().setTimeLast(t, this);
  }

  /**
    Informs the executive that the Entity should be awakened, if
    it is waiting for events, <i>i.e.</i>, returned to the
    <a href="package-summary.html#DefineComputing">Computing</a> state.
    Its inclusion in a method on an {@link org.mitre.sim.EntityDelegate EntityDelegate}
    implementation designates that method as an
    <a href="package-summary.html#ActionMethods">action method</a>.
    @param returnToken the token to be returned from
    {@link org.mitre.sim.Entity#waitForAction(double, Enum) waitForEvent}
    when the Entity is awakened.
    @throws IllegalStateException if entity is <a href="package-summary.html#DefineComplete">Complete</a>
   */
  public final void actionOccurred(Enum<?> returnToken) throws IllegalStateException {
    getExec().actionOccurred(this, returnToken);
  }

  /**
     Test the <code>target</code> entity and determine if it is in ready to
     receive an action method invocation.
     Entities can receive action method invocations only when they are in
     the <a href="package-summary.html#DefineActive">Active</a> state.
     @param target Entity instance to be tested.
     @return <code>true:</code> Entity is
     <a href="package-summary.html#DefineActive">Active</a>.
      <code>false:</code> The <code>target</code> entity is <b>null</b>,
     or not <a href="package-summary.html#DefineActive">Active</a>.
   */
  public final boolean entityIsAlive(Entity target) {
    if (target == null) {
      return false;
    }
    else {
      return (!target.stateEquals(LogicalProcessState.DORMANT)) &&
          (!target.stateEquals(LogicalProcessState.COMPLETE));
    }
  }

  /**
    Convenience method that concatenates the current simulation time,
    entity name, and the supplied message
    string before it is printed on <code>System.out</code>.
    @see org.mitre.sim.Simulation#info(String)
   */
  public final void info(String message) {
    System.out.println(infoTimeFormat.format(getTimeNow()) + " " + getName() 
        + " " + message);
  }

  /**
    Convenience method that concatenates the current simulation time,
    entity name, and the supplied message
    string before it is printed on <code>System.out</code>.
    @param out <code>PrintStream</code> to print on
    @see org.mitre.sim.Simulation#info(String, java.io.PrintStream)
   */
  public final void info(String message, PrintStream out) {
    out.println(infoTimeFormat.format(getTimeNow()) + " " + getName() 
        + " " + message);
  }

  /**
    Return the name, state, and simulation time as a comma-separated string.
    @return entity name, state, and simulation time.
   */
  public String toString() {
    return "{" + getName() + "," + getState().toString() + "," + getTimeNow() +
        "}";
  }

  /**
    Place the entity in the
    <a href="package-summary.html#DefineWaitingForTime">WaitingForTime</a>
    state until the specified amount of simulation time has passed.
    Zero or more events may occur (see
    {@link org.mitre.sim.Entity#actionOccurred(Enum) actionOccurred})
    during the invocation of this method, but control will <i>not</i> return until
    the specified amount of simulation time has passed.
    This method is similar to the HLA Time Advance Request service.
    @param delay Amount of simulation time that must pass before this entity
                 is eligible to be returned to the
                 <a href="package-summary.html#DefineComputing">Computing</a> state.
   */
  public void waitForTime(double delay) {
    getExec().waitForTime(delay, this);
  }

  /**
   * @deprecated
   * @param delay
   * @return WaitResult
   */
  public WaitResult testWaitForTime(double delay) {
    return getExec().testWaitForTime(delay, this);
  }

  /**
    Place the entity in the
    <a href="package-summary.html#DefineWaitingForEvent">WaitingForEvent</a> state
    until either
    <ul>
      <li>the specified amount of simulation time has passed or
      <li>an event occurs on the Entity as part of an
      <a href="package-summary.html#ActionMethods">action method</a>.
    </ul>
    This method is similar to the HLA Next Event Request service.
    <br>
    <b>Note on Return Tokens:</b>
    The <code>Enum</code> returned by this method is intended to indicate the reason the method
    returned.
    The reason will be either that the backstop time expired, or that
    {@link org.mitre.sim.Entity#actionOccurred(Enum) actionOccurred} was invoked.
    If the backstop time expired, the token will be the token specified in this call.
    If an action method was invoked, the token will be the token specified in the
    {@link org.mitre.sim.Entity#actionOccurred(Enum) actionOccurred} call.
    All the tokens returned in a given
    {@link org.mitre.sim.EntityDelegate EntityDelegate} implementation
    should be constants from the same (user-defined) <code>Enum</code>.
    This allows code like the following:
		<blockquote>
		<pre>
    public enum MyReturn {
        TIME_EXPIRED,
        ACTION_1,
        ACTION_2
    }
    
    ...
    
    public final class MyProcessDelegate implements ProcessDelegate {
    
      ...
      
      public void agenda() {
        ...
        switch((MyReturn)waitForEvent(backstopTime, MyReturn.TIME_EXPIRED)) {
        case TIME_EXPIRED:
           ...
        case ACTION_1:
           ...
        case ACTION_2:
           ...
        }
        ...
      }  
    }  
		</pre>
		</blockquote>
    @param backStop Maximum amount of simulation time that will pass before this
       entity is eligible to be returned to the
       <a href="package-summary.html#DefineComputing">Computing</a> state.
    @return {@link java.lang.Enum Enum} indicating the reason the call returned. (See note above.)
   */
  public Enum<?> waitForAction(double backStop, Enum<?> returnOnTimeToken) {
    return getExec().waitForEvent(backStop, returnOnTimeToken, this);
  }

  /**
   * @deprecated
   * @param backStop
   * @param returnOnTimeToken
   * @return {@link org.mitre.sim.WaitResult WaitResult}
   */
  public WaitResult testWaitForAction(double backStop, Enum<?> returnOnTimeToken) {
    return getExec().testWaitForEvent(backStop, returnOnTimeToken, this);
  }

  /**
     Schedule a method for execution after a specifed delay.
     The event method scheduled has the signature defined by the
     <code>methodName</code> and <code>arguments</code> parameters.
     The method will be invoked by the executive after
     <code>eventDelay</code> units of simulation time have passed.
     <p>
     The specified method must belong to the
     {@link org.mitre.sim.EntityDelegate EntityDelegate} instance associated with the <code>Entity</code>
     making the <code>schedule</code> invocation.
     {@link org.mitre.sim.EntityDelegate EntityDelegate} methods scheduled for execution using
     <code>schedule</code> should have a return type of <code>void</code>.
     The {@link org.mitre.sim.ProcessDelegate#agenda() agenda} method cannnot be scheduled for execution.
     The <code>EntityDelegate</code> class and the method must both be <code>public</code>.
     <p>
     The values of the supplied arguments are copied at the time of this invocation.
     These copied values are supplied to the event method when it is invoked.
     @param methodName  name of method being scheduled.
     @param eventDelay Amount of simulation time that must pass before the method is invoked by the executive.
     @param arguments Array of arguments supplied when <code>methodName</code> is executed.
     @throws java.lang.IllegalArgumentException if method of specified signature is not defined.
   */
  public void schedule(String methodName, double eventDelay, Object... arguments) 
  throws IllegalArgumentException 
  {
    scheduleMethod(methodName, eventDelay, arguments);
  }

  private void scheduleMethod(String methodName, double eventDelay,
                              Object[] arguments) {
    if (methodName.equals("agenda")) {
      throw new IllegalArgumentException("The agenda may not be scheduled");
    }
    if (eventDelay < 0.0) {
      throw new IllegalArgumentException("Events may not be scheduled with negative delay: " + eventDelay);
    }
    Class<?>[] argumentTypes = null;
    if (arguments != null) {
      argumentTypes = new Class[arguments.length];
      for (int i = 0; i < arguments.length; i++) {
        argumentTypes[i] = arguments[i].getClass();
      }
    }
    Method theEvent = null;
    try {
      theEvent = delegate.getClass().getMethod(methodName, argumentTypes);
    }
    catch (NoSuchMethodException e) {
      String message = "Method " + methodName + listArguments(argumentTypes) +
          " not found on " + delegate.getClass().toString();
      throw new IllegalArgumentException(message);
    }
    getExec().schedule(theEvent, eventDelay, this, arguments);
  }

  private String listArguments(Class<?>[] argumentTypes) {
    if (argumentTypes == null) {
      return "()";
    }
    String result = "(";
    for (int i = 0; i < argumentTypes.length; i++) {
      result = result + argumentTypes[i].getName() + ",";
    }
    return result.substring(0, result.length() - 1) + ")";
  }

}
